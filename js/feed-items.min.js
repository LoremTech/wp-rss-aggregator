(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["WPRA"] = factory();
	else
		root["WPRA"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return webpackJsonpWPRA([1],{

/***/ 23:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___ = __webpack_require__(24);
/* unused harmony namespace reexport */
 /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___["a" /* default */]); 

/***/ }),

/***/ 24:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_wp_list_table_dist_vue_wp_list_table_common__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_wp_list_table_dist_vue_wp_list_table_common___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_wp_list_table_dist_vue_wp_list_table_common__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__VSwitch__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BottomPanel__ = __webpack_require__(87);





/* harmony default export */ __webpack_exports__["a"] = ({
  template: '#wpra-feed-items-template',
  data: function data() {
    return {
      rowClassGetter: function rowClassGetter(row) {
        return row.enabled ? 'feed-item-enabled' : '';
      },
      selected: [],
      columns: WpraFeed.columns,
      list: [{
        id: 247,
        enabled: true,
        photo: 'https://seeklogo.com/images/1/100-cotton-logo-EA8A40B364-seeklogo.com.png',
        title: 'Sports Network',
        url: 'https://www.feed.com/feed',
        update: {
          next: 16,
          last: 14,
          imported: 3
        },
        imported: 32
      }]
    };
  },

  components: {
    ListTable: __WEBPACK_IMPORTED_MODULE_0_vue_wp_list_table_dist_vue_wp_list_table_common___default.a,
    VSwitch: __WEBPACK_IMPORTED_MODULE_1__VSwitch__["a" /* default */],
    BottomPanel: __WEBPACK_IMPORTED_MODULE_2__BottomPanel__["a" /* default */]
  },
  methods: {
    checked: function checked(ids) {
      this.selected = ids;
    }
  }
});

/***/ }),

/***/ 25:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_script_lang_js___ = __webpack_require__(26);
/* unused harmony namespace reexport */
 /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_script_lang_js___["a" /* default */]); 

/***/ }),

/***/ 26:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/**
 * Switcher component for switching states. Look like switcher with sliding button.
 *
 * @since [*next-version*]
 *
 * @var {object}
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    id: {
      type: String,
      required: true
    },
    value: {
      type: Boolean
    }
  },
  data: function data() {
    return {
      source: this.value
    };
  },

  watch: {
    value: function value(newValue) {
      this.source = newValue;
    }
  },
  methods: {
    modelChanged: function modelChanged() {
      this.$emit('input', this.source);
    }
  }
});

/***/ }),

/***/ 27:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 28:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_BottomPanel_vue_vue_type_script_lang_js___ = __webpack_require__(29);
/* unused harmony namespace reexport */
 /* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_BottomPanel_vue_vue_type_script_lang_js___["a" /* default */]); 

/***/ }),

/***/ 29:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["a"] = ({});

/***/ }),

/***/ 30:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 78:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(80);
__webpack_require__(79);




new __WEBPACK_IMPORTED_MODULE_0_vue__["a" /* default */]({
  el: '#wpra-feed-items-app',
  template: '<App/>',
  components: { App: __WEBPACK_IMPORTED_MODULE_1__App_vue__["a" /* default */] }
});

/***/ }),

/***/ 79:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 80:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__App_vue_vue_type_script_lang_js___ = __webpack_require__(23);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue_vue_type_style_index_0_lang_scss___ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_componentNormalizer_js__ = __webpack_require__(1);
var render, staticRenderFns





/* normalize component */

var component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_componentNormalizer_js__["a" /* default */])(
  __WEBPACK_IMPORTED_MODULE_0__App_vue_vue_type_script_lang_js___["a" /* default */],
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) {
  var api = require("/Users/rom/projects/my-project/web/app/plugins/wp-rss-aggregator/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(require('vue'))
  if (api.compatible) {
    module.hot.accept()
    if (!module.hot.data) {
      api.createRecord('25f74536', component.options)
    } else {
      api.reload('25f74536', component.options)
    }
    
  }
}
component.options.__file = "js/src/feed-items/App.vue"
/* harmony default export */ __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ 81:
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function webpackUniversalModuleDefinition(root, factory) {
	if (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports["ListTable"] = factory();else root["ListTable"] = factory();
})(this, function () {
	return (/******/function (modules) {
			// webpackBootstrap
			/******/ // The module cache
			/******/var installedModules = {};
			/******/
			/******/ // The require function
			/******/function __webpack_require__(moduleId) {
				/******/
				/******/ // Check if module is in cache
				/******/if (installedModules[moduleId]) {
					/******/return installedModules[moduleId].exports;
					/******/
				}
				/******/ // Create a new module (and put it into the cache)
				/******/var module = installedModules[moduleId] = {
					/******/i: moduleId,
					/******/l: false,
					/******/exports: {}
					/******/ };
				/******/
				/******/ // Execute the module function
				/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
				/******/
				/******/ // Flag the module as loaded
				/******/module.l = true;
				/******/
				/******/ // Return the exports of the module
				/******/return module.exports;
				/******/
			}
			/******/
			/******/
			/******/ // expose the modules object (__webpack_modules__)
			/******/__webpack_require__.m = modules;
			/******/
			/******/ // expose the module cache
			/******/__webpack_require__.c = installedModules;
			/******/
			/******/ // identity function for calling harmony imports with the correct context
			/******/__webpack_require__.i = function (value) {
				return value;
			};
			/******/
			/******/ // define getter function for harmony exports
			/******/__webpack_require__.d = function (exports, name, getter) {
				/******/if (!__webpack_require__.o(exports, name)) {
					/******/Object.defineProperty(exports, name, {
						/******/configurable: false,
						/******/enumerable: true,
						/******/get: getter
						/******/ });
					/******/
				}
				/******/
			};
			/******/
			/******/ // getDefaultExport function for compatibility with non-harmony modules
			/******/__webpack_require__.n = function (module) {
				/******/var getter = module && module.__esModule ?
				/******/function getDefault() {
					return module['default'];
				} :
				/******/function getModuleExports() {
					return module;
				};
				/******/__webpack_require__.d(getter, 'a', getter);
				/******/return getter;
				/******/
			};
			/******/
			/******/ // Object.prototype.hasOwnProperty.call
			/******/__webpack_require__.o = function (object, property) {
				return Object.prototype.hasOwnProperty.call(object, property);
			};
			/******/
			/******/ // __webpack_public_path__
			/******/__webpack_require__.p = "";
			/******/
			/******/ // Load entry module and return exports
			/******/return __webpack_require__(__webpack_require__.s = 3);
			/******/
		}(
		/************************************************************************/
		/******/[
		/* 0 */
		/***/function (module, exports, __webpack_require__) {

			eval("\n/* styles */\n__webpack_require__(4)\n\nvar Component = __webpack_require__(5)(\n  /* script */\n  __webpack_require__(2),\n  /* template */\n  __webpack_require__(6),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/rom/projects/vue-wp-list-table-component/src/components/ListTable.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] ListTable.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-114d4843\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-114d4843\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaXN0VGFibGUudnVlPzI5MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0EscUJBQWdHOztBQUVoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlEQUFpRCxJQUFJO0FBQ3BJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjAsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXI/aWQ9ZGF0YS12LTExNGQ0ODQzIWxlc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vTGlzdFRhYmxlLnZ1ZVwiKVxuXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9MaXN0VGFibGUudnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/aWQ9ZGF0YS12LTExNGQ0ODQzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9MaXN0VGFibGUudnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvVXNlcnMvcm9tL3Byb2plY3RzL3Z1ZS13cC1saXN0LXRhYmxlLWNvbXBvbmVudC9zcmMvY29tcG9uZW50cy9MaXN0VGFibGUudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkgIT09IFwiX19lc01vZHVsZVwifSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5pZiAoQ29tcG9uZW50Lm9wdGlvbnMuZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gTGlzdFRhYmxlLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0xMTRkNDg0M1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTExNGQ0ODQzXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG59KSgpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0xpc3RUYWJsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

			/***/
		},
		/* 1 */
		/***/function (module, exports) {

			eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

			/***/
		},
		/* 2 */
		/***/function (module, __webpack_exports__, __webpack_require__) {

			"use strict";

			eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\n  name: 'ListTable',\n\n  props: {\n    columns: {\n      type: Object,\n      required: true,\n      default: {}\n    },\n    rows: {\n      type: Array, // String, Number, Boolean, Function, Object, Array\n      required: true,\n      default: []\n    },\n    index: {\n      type: String,\n      default: 'id'\n    },\n    showCb: {\n      type: Boolean,\n      default: true\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    actionColumn: {\n      type: String,\n      default: ''\n    },\n    actions: {\n      type: Array,\n      required: false,\n      default: []\n    },\n    bulkActions: {\n      type: Array,\n      required: false,\n      default: []\n    },\n    tableClass: {\n      type: String,\n      default: 'wp-list-table widefat fixed striped'\n    },\n    notFound: {\n      type: String,\n      default: 'No items found.'\n    },\n    totalItems: {\n      type: Number,\n      default: 0\n    },\n    totalPages: {\n      type: Number,\n      default: 1\n    },\n    perPage: {\n      type: Number,\n      default: 20\n    },\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    sortBy: {\n      type: String,\n      default: null\n    },\n    sortOrder: {\n      type: String,\n      default: \"asc\"\n    },\n    rowClass: {\n      type: Function,\n      default: function _default() {\n        return function (row) {\n          return '';\n        };\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      bulkLocal: '-1',\n      checkedItems: []\n    };\n  },\n\n\n  computed: {\n    hasActions: function hasActions() {\n      return this.actions.length > 0;\n    },\n    hasBulkActions: function hasBulkActions() {\n      return this.bulkActions.length > 0;\n    },\n    itemsTotal: function itemsTotal() {\n      return this.totalItems || this.rows.length;\n    },\n    hasPagination: function hasPagination() {\n      return this.itemsTotal > this.perPage;\n    },\n    disableFirst: function disableFirst() {\n      if (this.currentPage === 1 || this.currentPage === 2) {\n        return true;\n      }\n\n      return false;\n    },\n    disablePrev: function disablePrev() {\n      if (this.currentPage === 1) {\n        return true;\n      }\n\n      return false;\n    },\n    disableNext: function disableNext() {\n      if (this.currentPage === this.totalPages) {\n        return true;\n      }\n\n      return false;\n    },\n    disableLast: function disableLast() {\n      if (this.currentPage === this.totalPages || this.currentPage == this.totalPages - 1) {\n        return true;\n      }\n\n      return false;\n    },\n    colspan: function colspan() {\n      var columns = Object.keys(this.columns).length;\n\n      if (this.showCb) {\n        columns += 1;\n      }\n\n      return columns;\n    },\n\n\n    selectAll: {\n\n      get: function get() {\n        if (!this.rows.length) {\n          return false;\n        }\n\n        return this.rows ? this.checkedItems.length == this.rows.length : false;\n      },\n\n      set: function set(value) {\n        var selected = [],\n            self = this;\n\n        if (value) {\n          this.rows.forEach(function (item) {\n            if (item[self.index] !== undefined) {\n              selected.push(item[self.index]);\n            } else {\n              selected.push(item.id);\n            }\n          });\n        }\n\n        this.checkedItems = selected;\n      }\n    }\n  },\n\n  watch: {\n    /**\n     * Watch for `checkItems` change, so parent can have some\n     * additional logic for bulk selection.\n     *\n     * @param value\n     */\n    checkedItems: function checkedItems(value) {\n      this.$emit('checked', value);\n    }\n  },\n\n  methods: {\n    hideActionSeparator: function hideActionSeparator(action) {\n      return action === this.actions[this.actions.length - 1].key;\n    },\n    actionClicked: function actionClicked(action, row) {\n      this.$emit('action:click', action, row);\n    },\n    goToPage: function goToPage(page) {\n      this.$emit('pagination', page);\n    },\n    goToCustomPage: function goToCustomPage(event) {\n      var page = parseInt(event.target.value);\n\n      if (!isNaN(page) && page > 0 && page <= this.totalPages) {\n        this.$emit('pagination', page);\n      }\n    },\n    handleBulkAction: function handleBulkAction() {\n      if (this.bulkLocal === '-1') {\n        return;\n      }\n\n      this.$emit('bulk:click', this.bulkLocal, this.checkedItems);\n    },\n    isSortable: function isSortable(column) {\n      if (column.hasOwnProperty('sortable') && column.sortable === true) {\n        return true;\n      }\n\n      return false;\n    },\n    isSorted: function isSorted(column) {\n      return column === this.sortBy;\n    },\n    handleSortBy: function handleSortBy(column) {\n      var order = this.sortOrder === 'asc' ? 'desc' : 'asc';\n\n      this.$emit('sort', column, order);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

			/***/
		},
		/* 3 */
		/***/function (module, __webpack_exports__, __webpack_require__) {

			"use strict";

			eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (immutable) */ __webpack_exports__[\"install\"] = install;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"ListTable\", function() { return __WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue___default.a; });\n\n\n// Install the components\nfunction install(Vue) {\n  Vue.component('ListTable', __WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue___default.a);\n  /* -- Add more components here -- */\n}\n\n// Expose the components\n\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nvar plugin = {\n  /* eslint-disable no-undef */\n  install: install\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__components_ListTable_vue___default.a);\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwicGx1Z2luIiwiR2xvYmFsVnVlIiwid2luZG93IiwiZ2xvYmFsIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUVBO0FBQ08sU0FBU0EsT0FBVCxDQUFrQkMsR0FBbEIsRUFBdUI7QUFDNUJBLE1BQUlDLFNBQUosQ0FBYyxXQUFkLEVBQTJCLGlFQUEzQjtBQUNBO0FBQ0Q7O0FBRUQ7QUFDQTs7QUFLQTtBQUNBOztBQUVBO0FBQ0EsSUFBTUMsU0FBUztBQUNiO0FBQ0FIO0FBRmEsQ0FBZjs7QUFLQSwrREFBZSxpRUFBZjs7QUFFQTtBQUNBLElBQUlJLFlBQVksSUFBaEI7QUFDQSxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakNELGNBQVlDLE9BQU9KLEdBQW5CO0FBQ0QsQ0FGRCxNQUVPLElBQUksT0FBT0ssTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUN4Q0YsY0FBWUUsT0FBT0wsR0FBbkI7QUFDRDtBQUNELElBQUlHLFNBQUosRUFBZTtBQUNiQSxZQUFVRyxHQUFWLENBQWNKLE1BQWQ7QUFDRCxDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGlzdFRhYmxlIGZyb20gJy4vY29tcG9uZW50cy9MaXN0VGFibGUudnVlJ1xuXG4vLyBJbnN0YWxsIHRoZSBjb21wb25lbnRzXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCAoVnVlKSB7XG4gIFZ1ZS5jb21wb25lbnQoJ0xpc3RUYWJsZScsIExpc3RUYWJsZSlcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8vIEV4cG9zZSB0aGUgY29tcG9uZW50c1xuZXhwb3J0IHtcbiAgTGlzdFRhYmxlLFxuICAvKiAtLSBBZGQgbW9yZSBjb21wb25lbnRzIGhlcmUgLS0gKi9cbn1cblxuLyogLS0gUGx1Z2luIGRlZmluaXRpb24gJiBBdXRvLWluc3RhbGwgLS0gKi9cbi8qIFlvdSBzaG91bGRuJ3QgaGF2ZSB0byBtb2RpZnkgdGhlIGNvZGUgYmVsb3cgKi9cblxuLy8gUGx1Z2luXG5jb25zdCBwbHVnaW4gPSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gIGluc3RhbGwsXG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RUYWJsZVxuXG4vLyBBdXRvLWluc3RhbGxcbmxldCBHbG9iYWxWdWUgPSBudWxsXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gd2luZG93LlZ1ZVxufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBHbG9iYWxWdWUgPSBnbG9iYWwuVnVlXG59XG5pZiAoR2xvYmFsVnVlKSB7XG4gIEdsb2JhbFZ1ZS51c2UocGx1Z2luKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

			/***/
		},
		/* 4 */
		/***/function (module, exports) {

			eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaXN0VGFibGUudnVlP2UwZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9sb2FkZXIuanM/e1wib21pdFwiOjAsXCJyZW1vdmVcIjp0cnVlfSEuL34vY3NzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTExNGQ0ODQzIS4vfi9sZXNzLWxvYWRlciEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0xpc3RUYWJsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

			/***/
		},
		/* 5 */
		/***/function (module, exports) {

			eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBzY29wZUlkLFxuICBjc3NNb2R1bGVzXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICAvLyBpbmplY3QgY3NzTW9kdWxlc1xuICBpZiAoY3NzTW9kdWxlcykge1xuICAgIHZhciBjb21wdXRlZCA9IG9wdGlvbnMuY29tcHV0ZWQgfHwgKG9wdGlvbnMuY29tcHV0ZWQgPSB7fSlcbiAgICBPYmplY3Qua2V5cyhjc3NNb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBjc3NNb2R1bGVzW2tleV1cbiAgICAgIGNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

			/***/
		},
		/* 6 */
		/***/function (module, exports, __webpack_require__) {

			eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    class: {\n      'table-loading': _vm.loading\n    }\n  }, [(_vm.loading) ? _c('div', {\n    staticClass: \"table-loader-wrap\"\n  }, [_vm._m(0)]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    staticClass: \"tablenav top\"\n  }, [(_vm.hasBulkActions) ? _c('div', {\n    staticClass: \"alignleft actions bulkactions\"\n  }, [_c('label', {\n    staticClass: \"screen-reader-text\",\n    attrs: {\n      \"for\": \"bulk-action-selector-top\"\n    }\n  }, [_vm._v(\"Select bulk action\")]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.bulkLocal),\n      expression: \"bulkLocal\"\n    }],\n    attrs: {\n      \"name\": \"action\",\n      \"id\": \"bulk-action-selector-top\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.bulkLocal = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"-1\"\n    }\n  }, [_vm._v(\"Bulk Actions\")]), _vm._v(\" \"), _vm._l((_vm.bulkActions), function(action) {\n    return _c('option', {\n      domProps: {\n        \"value\": action.key\n      }\n    }, [_vm._v(_vm._s(action.label))])\n  })], 2), _vm._v(\" \"), _c('button', {\n    staticClass: \"button action\",\n    attrs: {\n      \"disabled\": !_vm.checkedItems.length\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.handleBulkAction($event)\n      }\n    }\n  }, [_vm._v(\"Apply\")])]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    staticClass: \"alignleft actions\"\n  }, [_vm._t(\"filters\")], 2), _vm._v(\" \"), _c('div', {\n    staticClass: \"tablenav-pages\"\n  }, [_c('span', {\n    staticClass: \"displaying-num\"\n  }, [_vm._v(_vm._s(_vm.itemsTotal) + \" items\")]), _vm._v(\" \"), (_vm.hasPagination) ? _c('span', {\n    staticClass: \"pagination-links\"\n  }, [(_vm.disableFirst) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"«\")]) : _c('a', {\n    staticClass: \"first-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"«\")])]), _vm._v(\" \"), (_vm.disablePrev) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"‹\")]) : _c('a', {\n    staticClass: \"prev-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.currentPage - 1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"‹\")])]), _vm._v(\" \"), _c('span', {\n    staticClass: \"paging-input\"\n  }, [_c('span', {\n    staticClass: \"tablenav-paging-text\"\n  }, [_c('input', {\n    staticClass: \"current-page\",\n    attrs: {\n      \"type\": \"text\",\n      \"name\": \"paged\",\n      \"aria-describedby\": \"table-paging\",\n      \"size\": \"1\"\n    },\n    domProps: {\n      \"value\": _vm.currentPage\n    },\n    on: {\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key)) { return null; }\n        _vm.goToCustomPage($event)\n      }\n    }\n  }), _vm._v(\" of\\n            \"), _c('span', {\n    staticClass: \"total-pages\"\n  }, [_vm._v(_vm._s(_vm.totalPages))])])]), _vm._v(\" \"), (_vm.disableNext) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"›\")]) : _c('a', {\n    staticClass: \"next-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.currentPage + 1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"›\")])]), _vm._v(\" \"), (_vm.disableLast) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"»\")]) : _c('a', {\n    staticClass: \"last-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.totalPages)\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"»\")])])]) : _vm._e()])]), _vm._v(\" \"), _c('table', {\n    class: _vm.tableClass\n  }, [_c('thead', [_c('tr', [(_vm.showCb) ? _c('td', {\n    staticClass: \"manage-column column-cb check-column\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.selectAll),\n      expression: \"selectAll\"\n    }],\n    attrs: {\n      \"type\": \"checkbox\"\n    },\n    domProps: {\n      \"checked\": Array.isArray(_vm.selectAll) ? _vm._i(_vm.selectAll, null) > -1 : (_vm.selectAll)\n    },\n    on: {\n      \"change\": function($event) {\n        var $$a = _vm.selectAll,\n          $$el = $event.target,\n          $$c = $$el.checked ? (true) : (false);\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && (_vm.selectAll = $$a.concat([$$v]))\n          } else {\n            $$i > -1 && (_vm.selectAll = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))\n          }\n        } else {\n          _vm.selectAll = $$c\n        }\n      }\n    }\n  })]) : _vm._e(), _vm._v(\" \"), _vm._l((_vm.columns), function(value, key) {\n    return _c('th', {\n      class: [\n        'column',\n        key,\n        {\n          'sortable': _vm.isSortable(value)\n        },\n        {\n          'sorted': _vm.isSorted(key)\n        },\n        {\n          'asc': _vm.isSorted(key) && _vm.sortOrder === 'asc'\n        },\n        {\n          'desc': _vm.isSorted(key) && _vm.sortOrder === 'desc'\n        }\n      ]\n    }, [(!_vm.isSortable(value)) ? [_vm._v(\"\\n            \" + _vm._s(value.label) + \"\\n          \")] : _c('a', {\n      attrs: {\n        \"href\": \"#\"\n      },\n      on: {\n        \"click\": function($event) {\n          $event.preventDefault();\n          _vm.handleSortBy(key)\n        }\n      }\n    }, [_c('span', [_vm._v(_vm._s(value.label))]), _vm._v(\" \"), _c('span', {\n      staticClass: \"sorting-indicator\"\n    })])], 2)\n  })], 2)]), _vm._v(\" \"), _c('tfoot', [_c('tr', [(_vm.showCb) ? _c('td', {\n    staticClass: \"manage-column column-cb check-column\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.selectAll),\n      expression: \"selectAll\"\n    }],\n    attrs: {\n      \"type\": \"checkbox\"\n    },\n    domProps: {\n      \"checked\": Array.isArray(_vm.selectAll) ? _vm._i(_vm.selectAll, null) > -1 : (_vm.selectAll)\n    },\n    on: {\n      \"change\": function($event) {\n        var $$a = _vm.selectAll,\n          $$el = $event.target,\n          $$c = $$el.checked ? (true) : (false);\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && (_vm.selectAll = $$a.concat([$$v]))\n          } else {\n            $$i > -1 && (_vm.selectAll = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))\n          }\n        } else {\n          _vm.selectAll = $$c\n        }\n      }\n    }\n  })]) : _vm._e(), _vm._v(\" \"), _vm._l((_vm.columns), function(value, key) {\n    return _c('th', {\n      class: ['column', key]\n    }, [_vm._v(_vm._s(value.label))])\n  })], 2)]), _vm._v(\" \"), _c('tbody', [(_vm.rows.length) ? _vm._l((_vm.rows), function(row) {\n    return _c('tr', {\n      key: row[_vm.index],\n      class: _vm.rowClass(row)\n    }, [(_vm.showCb) ? _c('th', {\n      staticClass: \"check-column\",\n      attrs: {\n        \"scope\": \"row\"\n      }\n    }, [_c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.checkedItems),\n        expression: \"checkedItems\"\n      }],\n      attrs: {\n        \"type\": \"checkbox\",\n        \"name\": \"item[]\"\n      },\n      domProps: {\n        \"value\": row[_vm.index],\n        \"checked\": Array.isArray(_vm.checkedItems) ? _vm._i(_vm.checkedItems, row[_vm.index]) > -1 : (_vm.checkedItems)\n      },\n      on: {\n        \"change\": function($event) {\n          var $$a = _vm.checkedItems,\n            $$el = $event.target,\n            $$c = $$el.checked ? (true) : (false);\n          if (Array.isArray($$a)) {\n            var $$v = row[_vm.index],\n              $$i = _vm._i($$a, $$v);\n            if ($$el.checked) {\n              $$i < 0 && (_vm.checkedItems = $$a.concat([$$v]))\n            } else {\n              $$i > -1 && (_vm.checkedItems = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))\n            }\n          } else {\n            _vm.checkedItems = $$c\n          }\n        }\n      }\n    })]) : _vm._e(), _vm._v(\" \"), _vm._l((_vm.columns), function(value, key) {\n      return _c('td', {\n        class: ['column', key]\n      }, [_vm._t(key, [_vm._v(\"\\n              \" + _vm._s(row[key]) + \"\\n            \")], {\n        row: row\n      }), _vm._v(\" \"), (_vm.actionColumn === key && _vm.hasActions) ? _c('div', {\n        staticClass: \"row-actions\"\n      }, [_vm._t(\"row-actions\", _vm._l((_vm.actions), function(action) {\n        return _c('span', {\n          class: action.key\n        }, [_c('a', {\n          attrs: {\n            \"href\": \"#\"\n          },\n          on: {\n            \"click\": function($event) {\n              $event.preventDefault();\n              _vm.actionClicked(action.key, row)\n            }\n          }\n        }, [_vm._v(_vm._s(action.label))]), _vm._v(\" \"), (!_vm.hideActionSeparator(action.key)) ? [_vm._v(\" | \")] : _vm._e()], 2)\n      }), {\n        row: row\n      })], 2) : _vm._e()], 2)\n    })], 2)\n  }) : _c('tr', [_c('td', {\n    attrs: {\n      \"colspan\": _vm.colspan\n    }\n  }, [_vm._v(_vm._s(_vm.notFound))])])], 2)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"tablenav bottom\"\n  }, [(_vm.hasBulkActions) ? _c('div', {\n    staticClass: \"alignleft actions bulkactions\"\n  }, [_c('label', {\n    staticClass: \"screen-reader-text\",\n    attrs: {\n      \"for\": \"bulk-action-selector-top\"\n    }\n  }, [_vm._v(\"Select bulk action\")]), _vm._v(\" \"), _c('select', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.bulkLocal),\n      expression: \"bulkLocal\"\n    }],\n    attrs: {\n      \"name\": \"action\",\n      \"id\": \"bulk-action-selector-top\"\n    },\n    on: {\n      \"change\": function($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {\n          return o.selected\n        }).map(function(o) {\n          var val = \"_value\" in o ? o._value : o.value;\n          return val\n        });\n        _vm.bulkLocal = $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n      }\n    }\n  }, [_c('option', {\n    attrs: {\n      \"value\": \"-1\"\n    }\n  }, [_vm._v(\"Bulk Actions\")]), _vm._v(\" \"), _vm._l((_vm.bulkActions), function(action) {\n    return _c('option', {\n      domProps: {\n        \"value\": action.key\n      }\n    }, [_vm._v(_vm._s(action.label))])\n  })], 2), _vm._v(\" \"), _c('button', {\n    staticClass: \"button action\",\n    attrs: {\n      \"disabled\": !_vm.checkedItems.length\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.handleBulkAction($event)\n      }\n    }\n  }, [_vm._v(\"Apply\")])]) : _vm._e(), _vm._v(\" \"), _c('div', {\n    staticClass: \"tablenav-pages\"\n  }, [_c('span', {\n    staticClass: \"displaying-num\"\n  }, [_vm._v(_vm._s(_vm.itemsTotal) + \" items\")]), _vm._v(\" \"), (_vm.hasPagination) ? _c('span', {\n    staticClass: \"pagination-links\"\n  }, [(_vm.disableFirst) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"«\")]) : _c('a', {\n    staticClass: \"first-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"«\")])]), _vm._v(\" \"), (_vm.disablePrev) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"‹\")]) : _c('a', {\n    staticClass: \"prev-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.currentPage - 1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"‹\")])]), _vm._v(\" \"), _c('span', {\n    staticClass: \"paging-input\"\n  }, [_c('span', {\n    staticClass: \"tablenav-paging-text\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.currentPage) + \" of\\n            \"), _c('span', {\n    staticClass: \"total-pages\"\n  }, [_vm._v(_vm._s(_vm.totalPages))])])]), _vm._v(\" \"), (_vm.disableNext) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"›\")]) : _c('a', {\n    staticClass: \"next-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.currentPage + 1);\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"›\")])]), _vm._v(\" \"), (_vm.disableLast) ? _c('span', {\n    staticClass: \"tablenav-pages-navspan\",\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"»\")]) : _c('a', {\n    staticClass: \"last-page\",\n    attrs: {\n      \"href\": \"#\"\n    },\n    on: {\n      \"click\": function($event) {\n        $event.preventDefault();\n        _vm.goToPage(_vm.totalPages)\n      }\n    }\n  }, [_c('span', {\n    attrs: {\n      \"aria-hidden\": \"true\"\n    }\n  }, [_vm._v(\"»\")])])]) : _vm._e()])])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"table-loader-center\"\n  }, [_c('div', {\n    staticClass: \"table-loader\"\n  }, [_vm._v(\"Loading\")])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-114d4843\", module.exports)\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

			/***/
		}]
		/******/)
	);
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82)(module)))

/***/ }),

/***/ 83:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__VSwitch_vue_vue_type_template_id_22b83b5f___ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__VSwitch_vue_vue_type_script_lang_js___ = __webpack_require__(25);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__VSwitch_vue_vue_type_style_index_0_lang_scss___ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__node_modules_vue_loader_lib_runtime_componentNormalizer_js__ = __webpack_require__(1);






/* normalize component */

var component = Object(__WEBPACK_IMPORTED_MODULE_3__node_modules_vue_loader_lib_runtime_componentNormalizer_js__["a" /* default */])(
  __WEBPACK_IMPORTED_MODULE_1__VSwitch_vue_vue_type_script_lang_js___["a" /* default */],
  __WEBPACK_IMPORTED_MODULE_0__VSwitch_vue_vue_type_template_id_22b83b5f___["a" /* render */],
  __WEBPACK_IMPORTED_MODULE_0__VSwitch_vue_vue_type_template_id_22b83b5f___["b" /* staticRenderFns */],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) {
  var api = require("/Users/rom/projects/my-project/web/app/plugins/wp-rss-aggregator/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(require('vue'))
  if (api.compatible) {
    module.hot.accept()
    if (!module.hot.data) {
      api.createRecord('22b83b5f', component.options)
    } else {
      api.reload('22b83b5f', component.options)
    }
    module.hot.accept("./VSwitch.vue?vue&type=template&id=22b83b5f&", function () {
      api.rerender('22b83b5f', {
        render: render,
        staticRenderFns: staticRenderFns
      })
    })
  }
}
component.options.__file = "js/src/feed-items/VSwitch.vue"
/* harmony default export */ __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ 84:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_template_id_22b83b5f___ = __webpack_require__(85);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_template_id_22b83b5f___["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_template_id_22b83b5f___["b"]; });


/***/ }),

/***/ 85:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "switch-option_switch" }, [
    _c("div", { staticClass: "eddbk-switcher" }, [
      _c("input", {
        directives: [
          {
            name: "model",
            rawName: "v-model",
            value: _vm.source,
            expression: "source"
          }
        ],
        staticClass: "eddbk-switcher-checkbox",
        attrs: { type: "checkbox", id: _vm.id },
        domProps: {
          checked: Array.isArray(_vm.source)
            ? _vm._i(_vm.source, null) > -1
            : _vm.source
        },
        on: {
          change: [
            function($event) {
              var $$a = _vm.source,
                $$el = $event.target,
                $$c = $$el.checked ? true : false
              if (Array.isArray($$a)) {
                var $$v = null,
                  $$i = _vm._i($$a, $$v)
                if ($$el.checked) {
                  $$i < 0 && (_vm.source = $$a.concat([$$v]))
                } else {
                  $$i > -1 &&
                    (_vm.source = $$a.slice(0, $$i).concat($$a.slice($$i + 1)))
                }
              } else {
                _vm.source = $$c
              }
            },
            _vm.modelChanged
          ]
        }
      }),
      _vm._v(" "),
      _c("label", {
        staticClass: "eddbk-switcher-label",
        attrs: { for: _vm.id }
      })
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ 86:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_style_index_0_lang_scss___ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_style_index_0_lang_scss____default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_style_index_0_lang_scss___);
/* unused harmony reexport namespace */
 /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_VSwitch_vue_vue_type_style_index_0_lang_scss____default.a); 

/***/ }),

/***/ 87:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BottomPanel_vue_vue_type_template_id_2f66a4ae___ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BottomPanel_vue_vue_type_script_lang_js___ = __webpack_require__(28);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_componentNormalizer_js__ = __webpack_require__(1);





/* normalize component */

var component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_componentNormalizer_js__["a" /* default */])(
  __WEBPACK_IMPORTED_MODULE_1__BottomPanel_vue_vue_type_script_lang_js___["a" /* default */],
  __WEBPACK_IMPORTED_MODULE_0__BottomPanel_vue_vue_type_template_id_2f66a4ae___["a" /* render */],
  __WEBPACK_IMPORTED_MODULE_0__BottomPanel_vue_vue_type_template_id_2f66a4ae___["b" /* staticRenderFns */],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) {
  var api = require("/Users/rom/projects/my-project/web/app/plugins/wp-rss-aggregator/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(require('vue'))
  if (api.compatible) {
    module.hot.accept()
    if (!module.hot.data) {
      api.createRecord('2f66a4ae', component.options)
    } else {
      api.reload('2f66a4ae', component.options)
    }
    module.hot.accept("./BottomPanel.vue?vue&type=template&id=2f66a4ae&", function () {
      api.rerender('2f66a4ae', {
        render: render,
        staticRenderFns: staticRenderFns
      })
    })
  }
}
component.options.__file = "js/src/feed-items/BottomPanel.vue"
/* harmony default export */ __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_BottomPanel_vue_vue_type_template_id_2f66a4ae___ = __webpack_require__(89);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_BottomPanel_vue_vue_type_template_id_2f66a4ae___["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_BottomPanel_vue_vue_type_template_id_2f66a4ae___["b"]; });


/***/ }),

/***/ 89:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "wpra-bottom-panel" }, [_vm._t("default")], 2)
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ 90:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss____default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___);
/* unused harmony reexport namespace */
 /* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0__node_modules_extract_text_webpack_plugin_dist_loader_js_ref_0_0_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_0_2_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_fast_sass_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss____default.a); 

/***/ })

},[78]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,