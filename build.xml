<?xml version="1.0" encoding="UTF-8"?>
<project name="WP RSS Aggregator" default="build" basedir="." description="The WP RSS Aggregator Core plugin">

    <!-- Argument defaults -->
    <property name="version" value="0.0.0" />

    <!-- Release properties -->
    <property name="releaseProjectName" value="wp-rss-aggregator" />
    <property name="releaseZip" value="${releaseProjectName}-${version}.zip" />

    <!-- Directories -->
    <property name="basedir" value="." override="true" />
    <property name="binDir" value="${basedir}/bin" />
    <property name="outputDir" value="${basedir}/build" />
    <property name="buildDir" value="${outputDir}/${releaseProjectName}" />
    <property name="vendorDir" value="${basedir}/vendor" />
    <property name="releasesDir" value="${basedir}/releases" />

    <!-- Build files and directories -->
    <fileset dir="." id="copyFiles">
        <include name="**/**" />

        <exclude name=".git/**" />
        <exclude name=".idea/**" />
        <exclude name=".git*" />
        <exclude name="bin/**" />
        <exclude name="docs/**" />
        <exclude name="build/**" />
        <exclude name="releases/**" />
        <exclude name="vendor/**" />
        <exclude name="node_modules/**" />
        <exclude name="nbproject/**" />
        <exclude name="build.xml" />
        <exclude name="*.neon" />
        <exclude name=".babelrc" />
        <exclude name="composer.lock" />
        <exclude name="package-lock.json" />
        <exclude name="*.zip" />
    </fileset>

    <!-- Clears existing build -->
    <target name="delete-build" description="Deletes any existing build files">
        <if>
            <available file="${buildDir}" />
            <then>
                <chmod mode="0777" quiet="true">
                    <fileset dir="${buildDir}" defaultexcludes="false">
                        <include name="**/**" />
                    </fileset>
                </chmod>
            </then>
        </if>
        <delete dir="${buildDir}" includeemptydirs="true" />
    </target>

    <!-- Generates a copy of the current state -->
    <target name="copy" description="Generates a copy of the current state for building" depends="delete-build">
        <copy todir="${buildDir}">
            <fileset refid="copyFiles" />
        </copy>
    </target>

    <!-- Installs all non-dev PHP dependencies -->
    <target name="install-deps" description="Installs dependencies">
        <exec dir="${buildDir}/" command="composer install --no-dev" passthru="true" />
        <exec dir="${buildDir}/" command="npm install" passthru="true" />
    </target>

    <!-- Builds JS and CSS assets -->
    <target name="build-assets" description="Builds JS and CSS assets">
        <exec dir="${buildDir}/" command="npm run build" passthru="true" />
    </target>

    <!-- Cleans up the build files -->
    <target name="cleanup" description="Performs clean up on the build files">
        <delete dir="${buildDir}/node_modules" />
        <delete file="${buildDir}/composer.json" />
        <delete file="${buildDir}/composer.lock" />
        <delete file="${buildDir}/package.json" />
        <delete file="${buildDir}/package-lock.json" />
        <delete file="${buildDir}/webpack.config.js" />
    </target>

    <!-- Generates a build for the current project state -->
    <target name="build" description="Generates a build for the current state" depends="copy, install-deps, build-assets, cleanup">
    </target>

    <!-- Creates the ZIP archive for the build files -->
    <target name="archive" description="Creates an archive for the current build files">
        <zip destfile="${buildDir}/${releaseZip}">
            <fileset dir="${outputDir}">
                <include name="${releaseProjectName}/**" />
            </fileset>
        </zip>
        <move file="${buildDir}/${releaseZip}" todir="${releasesDir}" overwrite="true" />
    </target>

    <!-- Creates a release -->
    <target name="release" description="Creates a release" depends="build, snv-tags, archive">
    </target>

    <target name="snv-tags" description="Replaces all occurrences of next version placeholder with actual version number">
        <reflexive>
            <fileset dir="${buildDir}">
                <include name="*.php" />
                <include name="includes/**.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="\[\*next-version\*\]" replace="${version}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

</project>
